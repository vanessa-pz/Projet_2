import streamlit as st
import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Charger les données
file_path = r'c:\Users\dassi\Downloads\df_api_df.csv'
data = pd.read_csv(file_path)

# Préparer les données
st.set_page_config(page_title="Recommandation de Films", layout="wide")

    # Centrer le titre principal
st.markdown(
        """
        <div style="text-align: center;">
            <h1>🎞️ "Bienvenue sur Cinéma Movie Time ! Vous êtes au ciné ..chez vous." 🏡</h1>
            <h3>Les films de La Creuse présentent :</h3>
        </div>
        """,
unsafe_allow_html=True,
    )
    # Afficher une image sur le thème du cinéma en haut de la page
st.image(
        "https://img.freepik.com/vecteurs-premium/fond-film-cinema-premiere_41737-251.jpg?w=900",
        caption="Ne ratez jamais une séance grâce à Cinéma Movie Time",
        use_column_width  = True
    )
    # Séparateur visuel
st.markdown("<hr style='border: 1px solid #ccc;'>", unsafe_allow_html=True)
    # Section de présentation centrée
st.markdown(
        """
        <div style="text-align: center;">
            <h4>Une programmation proposée par :</h4>
            <p>👩‍💻 <b>Dalia</b>, 👨🏼‍💼 <b>Mourad</b>, 👨‍💻 <b>Adrien</b>, et 👩‍🏫 <b>Vanessa</b></p>
            <p><b>Bon film et bons pop corn ! 🍿 🎦</b></p>
        </div>
        """,
unsafe_allow_html=True,
    )
    # Section de mise en avant centrée
st.markdown(
        """
        <div style="text-align: center;">
            <h2>⭐ Des films Américains en Français !⭐</h2>
            <p>&#127909; Découvrez les derniers films sélectionnés pour vous</p>
            <p>🎬 Action, Drame, Comédie... il y en a pour tous les goûts !</p>
        </div>
        """,
unsafe_allow_html=True,
    )
    # Ajout d'un message spécial en couleur
st.markdown(
        """
        <div style="text-align: center; color: #FF5733;">
            <h3> C'est Noël avant l'heure !🎄🎅</h3>
        </div>
        """,
unsafe_allow_html=True,
    )
    # Pied de page
st.markdown("<hr style='border: 1px solid #ccc;'>", unsafe_allow_html=True)
st.markdown(
        """
        <div style="text-align: center;">
            <small>Projet sépcialement réalisé dans le cadre de notre aventure Wild Code School | © 2024</small>
        </div>
        """,
unsafe_allow_html=True,
    )

    
    # Afficher une image sur le thème du cinéma en haut de la page
st.image(
        r'c:\Users\dassi\Downloads\WEBSTAGRAM.jpg',
caption="Ne ratez jamais une séance grâce à Cinéma Movie Time",
use_column_width  = True)


# Extraction et nettoyage des genres
def safe_parse_genres(genre_str):
    import ast
    try:
        parsed = ast.literal_eval(genre_str)
        if isinstance(parsed, list):
            return ', '.join(parsed)
        return str(parsed)
    except (ValueError, SyntaxError):
        return "Action"

data['genres'] = data['genres'].apply(safe_parse_genres)

# Normalisation des colonnes numériques
numeric_columns = data.select_dtypes(include=['number'])
scaler = StandardScaler()
normalized_numeric_columns = pd.DataFrame(scaler.fit_transform(numeric_columns), columns=numeric_columns.columns)

# Division des données pour RandomForestClassifier
X = normalized_numeric_columns
y = pd.Categorical(data['genres']).codes
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entraîner le modèle Random Forest
best_rf = RandomForestClassifier(n_estimators=100, max_depth=None, min_samples_split=2, random_state=42)
best_rf.fit(X_train, y_train)
data['predicted_genres'] = pd.Categorical.from_codes(best_rf.predict(X), categories=pd.Categorical(data['genres']).categories)

# Entraîner le modèle NearestNeighbors
nn_model = NearestNeighbors(n_neighbors=6, metric='euclidean')
nn_model.fit(X)

# Fonction de recommandation
def recommander_films(nom_film):
    matches = data[data['titles'].str.contains(nom_film, case=False, na=False)]
    if matches.empty:
        return f"Aucun film trouvé correspondant à '{nom_film}'."

    film_index = matches.index[0]
    distances, indices = nn_model.kneighbors([X.iloc[film_index]])
    recommandations = data.iloc[indices[0][1:]]
    return recommandations

# Interface utilisateur
st.title("... Et voici votre recommandation minute 😎 ! Nous vous souhaitons un agréable visionnage 😊")
st.sidebar.title("Votre cinéma, à portée de clic !👌")

# Ajouter des couleurs au style
st.markdown(
    "<style>body {background-color: #f0f8ff;} .stApp {color: #444;} h1 {color: #333;} .stMarkdown {font-family: Arial;} .css-1cpxqw2 {background: linear-gradient(to right, #ff7f50, #6495ed);} </style>",
    unsafe_allow_html=True
)

film_cherche = st.sidebar.text_input("Que voulez-vous regarder aujourd'hui ?", "")
if film_cherche:
    recommandations = recommander_films(film_cherche)
    if isinstance(recommandations, str):
        st.write(recommandations)
    else:
        st.write(f"### Recommandations pour '{film_cherche}'")
        col1, col2, col3 = st.columns(3)
        for idx, row in recommandations.iterrows():
            with [col1, col2, col3][idx % 3]:
                st.image(row['poster_url'], width=150)
                st.write(f"#### {row['titles']}")
                st.write(f"[Voir la bande-annonce]({row['video_link']})")
                st.write(f"Genres: {row['genres']} | Popularité: {row['popularity']}")
